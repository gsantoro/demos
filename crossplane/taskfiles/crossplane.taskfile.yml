# https://taskfile.dev

version: '3'

includes:
  k8s:k3d: 
    taskfile: ./k8s.k3d.taskfile.yml

  helm: 
    taskfile: ./helm.taskfile.yml
    vars:
      HELM_REPO_NAME: crossplane-stable
      HELM_REPO_URL: https://charts.crossplane.io/stable
      HELM_RELEASE: crossplane
      HELM_CHART: crossplane-stable/crossplane
      HELM_NAMESPACE: crossplane-system
      HELM_PARAMS: --create-namespace
  
tasks:
  config:
    cmds:
      - task: k8s:k3d:create
      - task: helm:up
      - task: provider
      - task: credentials
      - task: provider:config

  config:delete:
    cmds:
      - task: k8s:k3d:delete

  up:
    deps:
      - config
    cmds:
      - task: bucket

  down:
    cmds:
      - task: bucket:delete
      - task: config:delete

  provider:
    cmds:
      - kubectl apply -f manifests/aws/provider.yaml
    status:
      - kubectl get provider -n crossplane-system | grep provider-aws-s3

  credentials:file:
    cmds:
      - |
        cat << EOF > envs/aws/data/creds.toml
        [default]
        aws_access_key_id = "$(cat envs/aws/.env.private.creds | grep AWS_ACCESS_KEY_ID | cut -d'=' -f2)"
        aws_secret_access_key = "$(cat envs/aws/.env.private.creds | grep AWS_SECRET_ACCESS_KEY | cut -d'=' -f2)"
        EOF
    preconditions:
      - test -f envs/aws/.env.private.creds
    status:
      - test -f envs/aws/data/creds.toml

  credentials:
    deps:
      - credentials:file
    cmds:
      - |
        kubectl create secret generic aws-secret \
        -n crossplane-system \
        --from-file=creds=envs/aws/data/creds.toml
    status:
      - kubectl get secret aws-secret -n crossplane-system | grep aws-secret

  credentials:delete:
    cmds:
      - kubectl delete secret aws-secret -n crossplane-system
    status:
      - kubectl get secret aws-secret -n crossplane-system | grep -v aws-secret

  provider:config:
    cmds:
      - kubectl apply -f manifests/aws/provider-config.yaml
    status:
      - kubectl get providerconfig -n crossplane-system | grep providerconfig.aws

  bucket:
    cmds:
      - kubectl create -f manifests/aws/s3.yaml
    status:
      - kubectl get bucket -n crossplane-system | grep crossplane-bucket

  bucket:delete:
    cmds:
      - kubectl delete bucket {{.BUCKETS_TO_DELETE}}
    vars:
      BUCKETS_TO_DELETE: 
        sh: kubectl get bucket -n crossplane-system -o jsonpath='{.items[0].metadata.name}' | gum filter

  default:
    cmds:
      - task: up